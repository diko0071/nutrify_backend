services:
  web: 
    build: 
      context: .
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./:/app
    expose:
      - 8000
    env_file: 
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api.tls=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api.tls.certresolver=letsencrypt
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api.rule=Host(`nutrify.work`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api.entrypoints=https
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-api.loadbalancer.server.port=8000
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-api.loadbalancer.server.scheme=http
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api-http.rule=Host(`nutrify.work`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api-http.entrypoints=http
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api-http.middlewares=default-https-redirect@file
    depends_on:
      - db

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME:-nutrify}
      - POSTGRES_USER=${DB_USER:-nutrify_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nutrify_user} -d ${DB_NAME:-nutrify}"]
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
